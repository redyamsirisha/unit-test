# .github/workflows/deploy.yaml nodejs app.
name: Build and Push to DockerHub
on:
  push:
    branches:
      - main
jobs:
  build:
    name: node js workflow
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#       ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      - uses: act10ns/slack@v1
        with:
         status: starting
         channel: '#test'
         if: always()
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: setup_NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm Install
        id: npm_install
        run: npm install
     # - run: yarn add --dev jest-junit
      - name: npm build
        id: npm_build
        run: npm run build --if-present
      - name: npm Test
        id: npm_test
        run: npm test
#         continue-on-error: true
      - uses: act10ns/slack@v1
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 
        env: 
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
#   Polaris-scan:
#     name: "Polaris Scan"
#     runs-on: ubuntu-latest
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success() || failure()
#     env:
#        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#     steps:        
      
#       - name: Set up JDK 1.8 test 
#         uses: actions/setup-java@v1
#         with:
#           java-version: 1.8



#       - name: Download Polaris_CLI
#         uses: carlosperate/download-file-action@v1.0.3
#         with:
#           file-url: 'https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip'
#           file-name: 'polaris_cli-linux64.zip'



#       - name: Unzip Polaris_CLI zip file
#         run: |
#              unzip polaris_cli-linux64.zip -d ./polaris_cli
#       - name: Run Polaris Scan
#         id: polaris_scan
#         env:
#           POLARIS_ACCESS_TOKEN: ${{secrets.POLARIS_ACCESS_TOKEN}}
#           POLARIS_SERVER_URL: ${{secrets.POLARIS_SERVER_URL}}
#         run: |
#              export PATH=$PATH:$(pwd)/polaris_cli/$(ls ./polaris_cli)/bin
#              polaris analyze --coverity-ignore-capture-failure --upload-local-config --wait 
#       - if: ${{steps.polaris_scan}}
#         name: Polaris Severity Issues
#         id: polaris_result
#         run: |
#           #cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary'
#           echo "##[set-output name=critical;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.critical' )"
#           echo "##[set-output name=high;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.high' )"
#           echo "##[set-output name=medium;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.medium' )"
#           echo "##[set-output name=low;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.low' )"   

    
#       - name: Specifying what to panic about notification
#         uses: adamkdean/simple-slack-notify@master
#         with:
#           channel: '#test'
#           username: 'PolariSAST'
#           text: " Polaris SAST Result:\n Critical: ${{ steps.polaris_result.outputs.critical }} \n High: ${{ steps.polaris_result.outputs.high }} \n Medium: ${{ steps.polaris_result.outputs.medium }} \n Low: ${{ steps.polaris_result.outputs.low }} \n Please Check and Fix the Issues"  
#           color: 'danger' 
        
      - name: Blackduck-SCA Scan
        uses: blackducksoftware/github-action@2.0.0
        with: 
         args: |
          --blackduck.url="${{ secrets.BLACKDUCK_URL}}" \
          --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" \
          --logging.level.com.synopsys.integration="DEBUG" \
          --detect.tools="DETECTOR" \
          --detect.project.name="$REPOSITORY_NAME" \
          --detect.project.version.distribution="SAAS" \  

#     Blackduck-SCA:  
#       name: "Blackduck SCA"
#     # needs: build
#       runs-on: ubuntu-16.04
#    # the build-and-test job might be skipped, we don't need to run this job then
#       if: success() || failure()
#       steps:        
#          - uses: actions/checkout@v2
#          - run: npm install
#          - name: Software Composition Analysis with Black Duck
#            uses: blackducksoftware/github-action@v2
#       with:
#           args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR" --logging.level.com.synopsys.integration="DEBUG" --detect.risk.report.pdf=true --detect.cleanup=false'
#           name: "Upload file"
#           id: upload-file
#           uses: google-github-actions/upload-cloud-storage@main
#           with:
#            credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
#            path: /home/runner/work/nodeJS_CICD_POC/nodeJS_CICD_POC/docker_web_app_0_0_1_BlackDuck_RiskReport.pdf
#            destination: blackduckreport  
        
     

      
