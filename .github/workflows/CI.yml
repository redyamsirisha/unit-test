# .github/workflows/deploy.yaml nodejs app.
name: Build and Push to DockerHub
on:
  push:
    branches:
      - main
jobs:
  build:
    name: node js workflow
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [13.x]
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#       ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
      - uses: act10ns/slack@v1
        with:
         status: starting
         channel: '#test'
         if: always()
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        id: setup_NodeJS
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm Install
        id: npm_install
        run: npm install
     # - run: yarn add --dev jest-junit
      - name: npm build
        id: npm_build
        run: npm run build --if-present
      - name: npm Test
        id: npm_test
        run: npm test
        continue-on-error: true
      - uses: act10ns/slack@v1
        with:
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 
        env: 
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
  Polaris-scan:
    name: "Polaris Scan"
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    env:
       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:        
      
      - name: Set up JDK 1.8 test 
        uses: actions/setup-java@v1
        with:
          java-version: 1.8



      - name: Download Polaris_CLI
        uses: carlosperate/download-file-action@v1.0.3
        with:
          file-url: 'https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip'
          file-name: 'polaris_cli-linux64.zip'



      - name: Unzip Polaris_CLI zip file
        run: |
             unzip polaris_cli-linux64.zip -d ./polaris_cli
      - name: Run Polaris Scan
        id: polaris_scan
        env:
          POLARIS_ACCESS_TOKEN: ${{secrets.POLARIS_ACCESS_TOKEN}}
          POLARIS_SERVER_URL: ${{secrets.POLARIS_SERVER_URL}}
        run: |
             export PATH=$PATH:$(pwd)/polaris_cli/$(ls ./polaris_cli)/bin
             polaris analyze --coverity-ignore-capture-failure --upload-local-config --wait 
      - if: ${{steps.polaris_scan}}
        name: Polaris Severity Issues
        id: polaris_result
        run: |
          #cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary'
          echo "##[set-output name=critical;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.critical' )"
          echo "##[set-output name=high;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.high' )"
          echo "##[set-output name=medium;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.medium' )"
          echo "##[set-output name=low;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.issuesBySeverity.low' )"   

    
      - name: Specifying what to panic about notification
        uses: adamkdean/simple-slack-notify@master
        with:
          channel: '#test'
          username: 'Polaris-result'
          text: " Polaris SAST Result:\n Critical: ${{ steps.polaris_result.outputs.critical }} \n High: ${{ steps.polaris_result.outputs.high }} \n Medium: ${{ steps.polaris_result.outputs.medium }} \n Low: ${{ steps.polaris_result.outputs.low }} \n IssueSummaryURL: ${{ steps.polaris_result.outputs.issuesummaryurl }} \n Please Check and Fix the Issues"  
          color: 'danger' 
          
#       - name: Specifying what to panic about notification
#         uses: adamkdean/simple-slack-notify@master
#         with:
#           channel: '#test'
#           username: 'siri'
#           slack-message: ${{ fromJson(steps.polaris_result.outputs.slack-result).response.message }}

#           run: echo "The result was ${{ steps.polaris_result.outputs.critical }}"

#           payload: |
#             {
#                 text: "Custom Field Check",
#                 attachments: [{
#                   "author_name": "8398a7@action-slack", // json
#                   fallback: 'fallback',
#                   color: 'good',
#                   title: 'CI Result',
#                   text: 'Succeeded',
#                   fields: [{
#                     title: 'lower case',
#                     value: 'LOWER CASE CHECK'.toLowerCase(),
#                     short: true
#                   },
#                   {
#                     title: 'reverse',
#                     value: 'gnirts esrever'.split('').reverse().join(''),
#                     short: true
#                   },
#                   {
#                     title: 'long title1',
#                     value: 'long value1',
#                     short: false
#                   }],
#                   actions: [{
#                   }]
#                 }]
#               }
#           text: 'Hello'
#           color: 'danger'
#           text: 'Hello'
#           color: 'danger'
#       - name: Specifying what to panic about notification
#         uses: adamkdean/simple-slack-notify@master
#         with:
#           channel: '#test'
#           username: 'siri'
#             text: Hello!
#           text: -u polaris_result.json
#       - name: Send message to Slack API       
#         uses: archive/github-actions-slack@v2.0.0
#         id: notify
#         with:
#          slack-bot-user-oauth-access-token: xapp-1-A01NGGBSNH4-1756563223383-e1812188c486c3a6c37afca2f105d544d47012f911102b8d382a44e47d95b8c9
#          slack-channel: 
#          slack-text: Hello!
#       - name: Result from "Send Message"
#         run: echo "The result was ${{ steps.notifyt.outputs.slack-result }}"

#       - name: Upload SARIF file
#         uses: github/codeql-action/upload-sarif@v1
#         with:
#           # Path to SARIF file relative to the root of the repository
#           sarif_file: polaris-scan-results.sarif.json



#       - name: Create comment
 
#       # Break build if issue count > 0
#         if: ${{ steps.polaris_result.outputs.issues > 0 }}
#         uses: peter-evans/create-or-update-comment@v1
#         with:
#          comment-id: ${{ steps.fc.outputs.comment-id }}
#          issue-number: ${{ steps.pr.outputs.pr }}
#          body: |
#           SAST scan result
#           Issues found: ${{steps.polaris_result.outputs.issues}}
#           Summary: ${{steps.polaris_result.outputs.summary-url}}
#          edit-mode: replace   
#       - uses: act10ns/slack@v1
#         env:
#           SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#         with:

          
#           status: ${{ job.status }}
# #           steps: ${{ steps.polaris_result.outputs.slack-result }}
#           channel: '#test'
#           slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} 
#         if: always()  
        
        
#       - name: Slack Notification
#         uses:  act10ns/slack@v1
#         env:
#            SLACK_CHANNEL: '#test'
#            SLACK_COLOR: '#3278BD'
# #            SLACK_ICON: https://github.com/polaris.png?size=48
#            SLACK_MESSAGE: 'Post Content :polaris:'
#            SLACK_TITLE: Post Title
#            SLACK_USERNAME: sirinoti
#            SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    
#       - name: 'Slack Notification Action'
#         description: 'Send notification to Slack'
#         author: 'Customer Web'
#         inputs:
#         GITHUB_TOKEN:
#          description: 'The GitHub token (only needed for PUSH_REQUEST)'
#         required: false
#         PAYLOAD_TYPE:
#          description: 'The payload type: PULL_REQUEST, DEPLOY_FAILURE, NPM_AUDIT_FAILURE'  
#          required: true
#         SLACK_API_TOKEN:
#          description: 'The Slack API token'
#          required: true
#         runs:
#        using: 'node12'
#         main: 'dist/index.js' 
#         SLACK_CHANNEL: '#test'
#         SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}   
          
          
#       - uses: actions/checkout@v2       
#       - name: Static Analysis with Polaris
#         id: polaris_sast
#         shell : bash 
#         env:
#             GITHB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#         run: |
#           export POLARIS_SERVER_URL=${{ secrets.POLARIS_SERVER_URL}}
#           export POLARIS_ACCESS_TOKEN=${{ secrets.POLARIS_ACCESS_TOKEN}}
#           wget -q https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip
#           unzip -j polaris_cli-linux64.zip -d /tmp
#           /tmp/polaris -c polaris.yml analyze -w --coverity-ignore-capture-failure
#       - uses: act10ns/slack@v1
#         with:
# #          status: ${{ job.status }}
# #          steps: ${{ toJson(steps) }}
#          slack_text: Hello!
#          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
#         if: always() 
#  Blackduck-SCA:
#     name: "Blackduck SCA"
#     # needs: build
#     runs-on: ubuntu-16.04
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success() || failure()
#     steps:        
#       - uses: actions/checkout@v2
#       - run: npm install
#       - name: Software Composition Analysis with Black Duck
#         uses: blackducksoftware/github-action@v2
#         with:
#           args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR" --logging.level.com.synopsys.integration="DEBUG" --detect.risk.report.pdf=true --detect.cleanup=false'
          
#       - id: upload-file
#         uses: google-github-actions/upload-cloud-storage@main
#         with:
#           credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
#           path: /home/runner/work/nodeJS_CICD_POC/nodeJS_CICD_POC/docker_web_app_0_0_1_BlackDuck_RiskReport.pdf
#           destination: blackduckreport  
        
     

      
