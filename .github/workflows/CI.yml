# .github/workflows/deploy.yaml nodejs app
name: Build and Push to DockerHub
name: Build and Push to DockerHub
on:
on:
  push:
  push:
    branches:
    branches:
      - main
      - main
jobs:
jobs:
  build:
  build:
    name: node js workflow
    name: node js workflow
    runs-on: ubuntu-latest
    runs-on: ubuntu-latest
    strategy:
    strategy:
      matrix:
      matrix:
        node-version: [13.x]
        node-version: [13.x]
    env:
    env:
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
#       ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
#       ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
    steps:
    steps:
      - uses: act10ns/slack@v1
      - uses: act10ns/slack@v1
        with:
        with:
         status: starting
         status: starting
         channel: '#test'
         channel: '#test'
         if: always()
         if: always()
      - uses: actions/checkout@v2
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
      - name: Use Node.js ${{ matrix.node-version }}
        id: setup_NodeJS
        id: setup_NodeJS
        uses: actions/setup-node@v1
        uses: actions/setup-node@v1
        with:
        with:
          node-version: ${{ matrix.node-version }}
          node-version: ${{ matrix.node-version }}
      - name: npm Install
      - name: npm Install
        id: npm_install
        id: npm_install
        run: npm install
        run: npm install
     # - run: yarn add --dev jest-junit
     # - run: yarn add --dev jest-junit
      - name: npm build
      - name: npm build
        id: npm_build
        id: npm_build
        run: npm run build --if-present
        run: npm run build --if-present
      - name: npm Test
      - name: npm Test
        id: npm_test
        id: npm_test
        run: npm test
        run: npm test
        continue-on-error: true
        continue-on-error: true
      - uses: act10ns/slack@v1
      - uses: act10ns/slack@v1
        with:
        with:
            status: ${{ job.status }}
            status: ${{ job.status }}
            steps: ${{ toJson(steps) }}
            steps: ${{ toJson(steps) }}
            slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
            slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        if: always() 
        if: always() 
        env: 
        env: 
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 
  Polaris-scan:
  Polaris-scan:
    name: "Polaris Scan"
    name: "Polaris Scan"
    runs-on: ubuntu-latest
    runs-on: ubuntu-latest
    # the build-and-test job might be skipped, we don't need to run this job then
    # the build-and-test job might be skipped, we don't need to run this job then
    if: success() || failure()
    if: success() || failure()
    env:
    env:
       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
       SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:        
    steps:        
      - name: Set up JDK 1.8 test 
      - name: Set up JDK 1.8 test 
        uses: actions/setup-java@v1
        uses: actions/setup-java@v1
        with:
        with:
          java-version: 1.8
          java-version: 1.8
      - name: Download Polaris_CLI
      - name: Download Polaris_CLI
        uses: carlosperate/download-file-action@v1.0.3
        uses: carlosperate/download-file-action@v1.0.3
        with:
        with:
          file-url: 'https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip'
          file-url: 'https://ikea.polaris.synopsys.com/api/tools/polaris_cli-linux64.zip'
          file-name: 'polaris_cli-linux64.zip'
          file-name: 'polaris_cli-linux64.zip'
      - name: Unzip Polaris_CLI zip file
      - name: Unzip Polaris_CLI zip file
        run: |
        run: |
             unzip polaris_cli-linux64.zip -d ./polaris_cli
             unzip polaris_cli-linux64.zip -d ./polaris_cli
      - name: Run Polaris Scan
      - name: Run Polaris Scan
        id: polaris_scan
        id: polaris_scan
        env:
        env:
          POLARIS_ACCESS_TOKEN: ${{secrets.POLARIS_ACCESS_TOKEN}}
          POLARIS_ACCESS_TOKEN: ${{secrets.POLARIS_ACCESS_TOKEN}}
          POLARIS_SERVER_URL: ${{secrets.POLARIS_SERVER_URL}}
          POLARIS_SERVER_URL: ${{secrets.POLARIS_SERVER_URL}}
        run: |
        run: |
             export PATH=$PATH:$(pwd)/polaris_cli/$(ls ./polaris_cli)/bin
             export PATH=$PATH:$(pwd)/polaris_cli/$(ls ./polaris_cli)/bin
             polaris analyze --coverity-ignore-capture-failure --upload-local-config --wait 
             polaris analyze --coverity-ignore-capture-failure --upload-local-config --wait 
      - if: ${{steps.polaris_scan}}
      - if: ${{steps.polaris_scan}}
        name: Polaris Severity Issues
        name: Polaris Severity Issues
        id: polaris_result
        id: polaris_result
        run: |
        run: |
          #cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary'
          #cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary'
          echo "##[set-output name=critical;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.Critical' )"
          echo "##[set-output name=critical;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.Critical' )"
          echo "##[set-output name=high;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.High' )"
          echo "##[set-output name=high;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.High' )"
          echo "##[set-output name=medium;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.Medium' )"
          echo "##[set-output name=medium;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.Medium' )"
          echo "##[set-output name=low;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.Low' )"   
          echo "##[set-output name=low;]$(cat ./.synopsys/polaris/cli-scan.json | jq '.issueSummary.IssuesBySeverity.Low' )"   
      - name: Create comment
      - name: Create comment
      # Break build if issue count > 0
      # Break build if issue count > 0
        if: ${{ steps.polaris_result.outputs.issues > 0 }}
        if: ${{ steps.polaris_result.outputs.issues > 0 }}
        uses: peter-evans/create-or-update-comment@v1
        uses: peter-evans/create-or-update-comment@v1
        with:
        with:
         comment-id: ${{ steps.fc.outputs.comment-id }}
         comment-id: ${{ steps.fc.outputs.comment-id }}
         issue-number: ${{ steps.pr.outputs.pr }}
         issue-number: ${{ steps.pr.outputs.pr }}
         body: |
         body: |
          SAST scan result
          SAST scan result
          Issues found: ${{steps.polaris_result.outputs.issues}}
          Issues found: ${{steps.polaris_result.outputs.issues}}
          Summary: ${{steps.polaris_result.outputs.summary-url}}
          Summary: ${{steps.polaris_result.outputs.summary-url}}
         edit-mode: replace   
         edit-mode: replace   
      - uses: act10ns/slack@v1
#       - uses: act10ns/slack@v1
        with:
#         with:
# #           - name: Result from "Send Message"
# # #           - name: Result from "Send Message"
          run: echo "The result was ${{ steps.polaris_result.outputs.slack-result }}" 
#           run: echo "The result was ${{ steps.polaris_result.outputs.slack-result }}" 


#           status: ${{ job.status }}
# #           status: ${{ job.status }}
#           steps: ${{ toJson(steps) }}
# #           steps: ${{ toJson(steps) }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} 
#           slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }} 
        if: always()  
#         if: always()  




#       - uses: actions/checkout@v2       
#       - uses: actions/checkout@v2       
@@ -129,6 +129,26 @@ jobs:
#          steps: ${{ toJson(steps) }}
#          steps: ${{ toJson(steps) }}
#          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
#          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
#         if: always() 
#         if: always() 
#  Blackduck-SCA:
#     name: "Blackduck SCA"
#     # needs: build
#     runs-on: ubuntu-16.04
#     # the build-and-test job might be skipped, we don't need to run this job then
#     if: success() || failure()
#     steps:        
#       - uses: actions/checkout@v2
#       - run: npm install
#       - name: Software Composition Analysis with Black Duck
#         uses: blackducksoftware/github-action@v2
#         with:
#           args: '--blackduck.url="${{ secrets.BLACKDUCK_URL}}" --blackduck.api.token="${{ secrets.BLACKDUCK_API_TOKEN}}" --detect.tools="DETECTOR" --logging.level.com.synopsys.integration="DEBUG" --detect.risk.report.pdf=true --detect.cleanup=false'

#       - id: upload-file
#         uses: google-github-actions/upload-cloud-storage@main
#         with:
#           credentials: ${{ secrets.GOOGLE_CREDENTIALS }}
#           path: /home/runner/work/nodeJS_CICD_POC/nodeJS_CICD_POC/docker_web_app_0_0_1_BlackDuck_RiskReport.pdf
#           destination: blackduckreport  





